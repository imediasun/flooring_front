#!/bin/bash

COMMIT_MSG=`cat $1`

# skip commit messages that already has correct format
if [[ $COMMIT_MSG =~ ^SE-[0-9]+ ]]; then
  echo "Skipping commit message that already has correct format"
  exit 0
fi

# Include any branches for which you wish to disable this script
if [ -z "$BRANCHES_TO_SKIP" ]; then
  BRANCHES_TO_SKIP=(master develop staging test)
fi

# Get the current branch name and check if it is excluded
BRANCH_NAME=$(git symbolic-ref --short HEAD)
BRANCH_EXCLUDED=$(printf "%s\n" "${BRANCHES_TO_SKIP[@]}" | grep -c "^$BRANCH_NAME$")

# If the current branch is excluded, exit
if [[ $BRANCH_EXCLUDED -eq 1 ]]; then
  echo "Skipping ${BRANCH_NAME} branch"
  exit 0
fi

# Check if the branch name is in the correct format
if [[ ! $BRANCH_NAME =~ ^(feature|release|hotfix|bugfix)/SE-[0-9]+ ]]; then
  echo "Branch name must be in the format SE-123-some-text"
  exit 1
fi

# Trim it down to get the parts we're interested in
# basically SE-123-some-text becomes SE-123 and is added to commit message in if
TRIMMED=$(echo $BRANCH_NAME | sed 's/.*\(SE-[^-]*\).*/\1/')

# Prepend the trimmed branch name to the commit message
sed -i.bak -e "1s/^/$TRIMMED /" $1
